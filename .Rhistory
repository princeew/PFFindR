sum(tmp / sum(tmp))
sample(0:1, 3, prob = c(0.5, 0.5))
sample(0:1, 3, prob = c(0.5, 0.5), replace = T)
sample(0:1, 3, prob = c(0.05, 0.95), replace = T)
sample(0:1, 3, prob = c(0.95, 0.05), replace = T)
sample(0:1, 10, prob = c(0.95, 0.05), replace = T)
table(sample(0:1, 1000, prob = c(0.95, 0.05), replace = T))
62/1000
?lapply
.maybeMutateNetwork <- function(network, mutation_rate) {
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
print(mutate)
}
.maybeMutateNetwork(NULL, 0.05)
.maybeMutateNetwork(NULL, 0.05)
.maybeMutateNetwork(NULL, 0.05)
.maybeMutateNetwork(NULL, 0.9)
.maybeMutateNetwork(NULL, 0.9)
.maybeMutateNetwork(NULL, 0.4)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork <- function(network, mutation_rate) {
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
print("mutated")
}
}
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
.maybeMutateNetwork(NULL, 0.5)
top_network@loci
top_network@genes
pf_data@loci_data
pf_data@loci_data_
pf_data@loci_data
pf_data@loci
pf_data@loci_dataframe
top_network@loci
top_network@genes
attr(pf_data, "locus_id")
pf_data@loci_data
attr(pf_data@loci_data, "locus_id")
attr(pf_data, "loci_data")
attr(pf_data, "loci_data") -> loci_data
typeof(loci_data)
sample_gene <- function(locus) {
return(sample(attr(locus, "true_members"), 1))
}
lapply(loci_data, sample_gene)
top_network
top_network
top_network@loci
top_network@genes
pf_data@loci_data[["Locus for PALB2"]]
pf_data@loci_data["Locus for PALB2"]
pf_data@loci_data
top_network
mutation_rate = 0.05
pf_data@loci_data[[1]]
mutation_rate = 0.05
mutation_rate = 0.05
for (locus in top_network@loci) {
mutation_index <- grep(locus, top_network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", top_network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  top_network@genes[mutation_index]))
}
}
mutation_rate = 0.5
for (locus in top_network@loci) {
mutation_index <- grep(locus, top_network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", top_network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  top_network@genes[mutation_index]))
}
}
mutation_rate = 0.05
for (locus in top_network@loci) {
mutation_index <- grep(locus, top_network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", top_network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  top_network@genes[mutation_index]))
}
}
for (locus in top_network@loci) {
mutation_index <- grep(locus, top_network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", top_network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  top_network@genes[mutation_index]))
}
}
.helper_fn <- function(locus, network) {
mutation_index <- grep(locus, top_network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", top_network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  top_network@genes[mutation_index]))
}
}
lapply(pf_data@loci_data, .helper_fn, network = top_network)
.helper_fn <- function(locus, network, pf_data) {
mutation_index <- grep(locus, network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  network@genes[mutation_index]))
}
}
lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data)
.helper_fn(pf_data@loci_data[[1]], top_network, pf_data)
pf_data@loci_data[[1]]
.helper_fn <- function(locus, network, pf_data) {
mutation_index <- grep(locus@locus_id, network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
print(paste0("Mutated ", network@genes[mutation_index], " to ", mutated_gene))
} else {
print(paste0("No mutation on ",  network@genes[mutation_index]))
}
}
.helper_fn(pf_data@loci_data[[1]], top_network, pf_data)
lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data)
apply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data)
lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data)
.helper_fn <- function(locus, network, pf_data) {
mutation_index <- grep(locus@locus_id, network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
return(mutated_gene)
} else {
return(network@genes[mutation_index])
}
}
lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data)
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
typeof(population)
population
}
.maybeMutateLocus <- function(locus, network, pf_data) {
mutation_index <- grep(locus@locus_id, network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
return(mutated_gene)
} else {
return(network@genes[mutation_index])
}
}
.mutateNetwork <- function(network, pf_data, mutation_rate = 0.05) {
}
.mutateNetwork <- function(network, pf_data, mutation_rate = 0.05) {
}
}
.mutateNetwork <- function(network, pf_data, mutation_rate = 0.05) {
network_genes <- unlist(lapply(pf_data@loci_data,
.maybeMutateNetwork,
network = top_network,
pf_data = pf_data))
return(network_genes)
}
.mutateNetwork(top_network, pf_data)
.mutateNetwork <- function(network, pf_data, mutation_rate = 0.05) {
network_genes <- unlist(lapply(pf_data@loci_data,
.maybeMutateNetwork,
network = network,
pf_data = pf_data))
return(network_genes)
}
.mutateNetwork(top_network, pf_data)
unlist(lapply(pf_data@loci_data, .maybeMutateNetwork, network = network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .helper_fn, network = top_network, pf_data = pf_data))
unlist(lapply(pf_data@loci_data, .maybeMutateLocus, network = top_network, pf_data = pf_data))
.mutateNetwork <- function(network, pf_data, mutation_rate = 0.05) {
network_genes <- unlist(lapply(pf_data@loci_data, .maybeMutateLocus, network = top_network, pf_data = pf_data))
return(network_genes)
}
.mutateNetwork(top_network, pf_data)
.mutateNetwork(top_network, pf_data)
.mutateNetwork(top_network, pf_data)
.mutateNetwork(top_network, pf_data)
.mutateNetwork(top_network, pf_data)
.mutateNetwork(top_network, pf_data)
top_network@genes
mutateNetworks <- function(population, pf_data, mutation_rate = 0.05) {
mutated_population <- lapply(population, .mutateNetwork, pf_data = pf_data, mutation_rate = mutation_rate)
return(mutated_population)
}
.mutateNetwork <- function(network, pf_data, mutation_rate) {
network_genes <- unlist(lapply(pf_data@loci_data, .maybeMutateLocus, network = top_network, pf_data = pf_data, mutation_rate = mutation_rate))
network@genes <- network_genes
return(network)
}
mutateNetworks(population, pf_data)
.maybeMutateLocus <- function(locus, network, pf_data, mutation_rate) {
mutation_index <- grep(locus@locus_id, network@loci)
mutate <- sample(0:1, 1, prob = c((1 - mutation_rate), mutation_rate))
if (mutate) {
mutated_gene <- sample(attr(pf_data@loci_data[[mutation_index]], "true_members"), 1)
return(mutated_gene)
} else {
return(network@genes[mutation_index])
}
}
mutateNetworks(population, pf_data)
getNetworkDensity(population, return_mean = F)
tmp <- getNetworkDensity(population, return_mean = F)
tmp
tmp / sum(tmp)
tmp2 <- tmp ** 3
tmp / sum(tmp)
tmp2 / sum(tmp2)
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
probs <- network_scores / sum(network_scores)
sample(population, 2, prob = probs)
network_scores
network_scores + 1 -> network_scores
sample(population, 2, prob = probs)
probs <- network_scores / sum(network_scores)
sample(population, 2, prob = probs)
mates <- sample(population, 2, prob = probs, replace = T)
mates <- mutateNetworks(mates, pf_data)
mates
.get_gene_options <- function(network) {
return(network@genes)
}
lapply(mates, .get_gene_options)
unlist(lapply(mates, .get_gene_options))
as.data.frame(lapply(mates, .get_gene_options))
as.matrix(lapply(mates, .get_gene_options))
as.data.frame(lapply(mates, .get_gene_options))
as.data.frame(lapply(mates, .get_gene_options))[1,]
.select_genes <- function(gene_option_row) {
return(sample(unlist(gene_option_row), 1))
}
gene_options <- .get_gene_options(mates)
gene_options <- lapply(mates, .get_gene_options)
gene_options
apply(as.data.frame(gene_options), 1, .select_genes)
offspring <- apply(as.data.frame(gene_options), 1, .select_genes)
offspring_genes <- apply(as.data.frame(gene_options), 1, .select_genes)
pf_data@loci_dataframe$locusID
offspring <- new(
"PrixFixeNetwork",
"loci" = pf_data@loci_dataframe$locusID,
"genes" = offspring_genes)
offspring
.mateNetworks <- function(population, pf_data) {
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
probs <- network_scores / sum(network_scores)
mates <- sample(population, 2, prob = probs, replace = T)
mates <- mutateNetworks(mates, pf_data)
gene_options <- lapply(mates, .get_gene_options)
offspring_genes <- apply(as.data.frame(gene_options), 1, .select_genes)
offspring <- new(
"PrixFixeNetwork",
"loci" = pf_data@loci_dataframe$locusID,
"genes" = offspring_genes)
return(offspring)
}
tmp <- list(1:10)
tmp
as.list(1:10)
.mateNetworks <- function(mating_iteration, population, pf_data) {
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
probs <- network_scores / sum(network_scores)
mates <- sample(population, 2, prob = probs, replace = T)
mates <- mutateNetworks(mates, pf_data)
gene_options <- lapply(mates, .get_gene_options)
offspring_genes <- apply(as.data.frame(gene_options), 1, .select_genes)
offspring <- new(
"PrixFixeNetwork",
"loci" = pf_data@loci_dataframe$locusID,
"genes" = offspring_genes)
return(offspring)
}
mateNetworks <- function(population, pf_data, num_matings) {
mating_iterations <- as.list(1:num_matings)
new_population <- lapply(mating_iterations, .mateNetworks, population = population
pf_data = pf_data)
return(new_population)
}
mateNetworks <- function(population, pf_data, num_matings) {
mating_iterations <- as.list(1:num_matings)
new_population <- lapply(mating_iterations, .mateNetworks, population = population,
pf_data = pf_data)
return(new_population)
}
mateNetworks(population, pf_data, 10)
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 20, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
# Calculate the p-value of the population
cat("\nCalculating Significance of Population...")
t_s <- Sys.time()
p_value <- evaluatePopulationSignficance(pf_data, population, 10)
print(p_value)
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
for (i in 1:3) {
# Mate population
population <- mateNetworks(population, pf_data, 20)
# Calculate the p-value of the population
cat("\nCalculating Significance of Population...")
t_s <- Sys.time()
p_value <- evaluatePopulationSignficance(pf_data, population, 10)
print(p_value)
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
}
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 20, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
for (i in 1:3) {
# Mate population
population <- mateNetworks(population, pf_data, 20)
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
}
.mateNetworks <- function(mating_iteration, population, pf_data) {
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
if (length(network_scores[network_scores > 0]) <= 2) {
network_scores <- network_scores + 1
}
probs <- network_scores / sum(network_scores)
mates <- sample(population, 2, prob = probs, replace = T)
mates <- mutateNetworks(mates, pf_data)
gene_options <- lapply(mates, .get_gene_options)
offspring_genes <- apply(as.data.frame(gene_options), 1, .select_genes)
offspring <- new(
"PrixFixeNetwork",
"loci" = pf_data@loci_dataframe$locusID,
"genes" = offspring_genes)
return(offspring)
}
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
for (i in 1:3) {
# Mate population
population <- mateNetworks(population, pf_data, 20)
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
}
length(network_scores[network_scores > 0])
network_scores
network_scores - 1 -> network_scores
network_scores
length(network_scores[network_scores > 0])
network_scores + 1 -> network_scores
probs <- network_scores / sum(network_scores)
probs
sample(population, 2, prob = probs, replace = T)
length(population)
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
network_scores
population
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 20, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
population
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
.mateNetworks <- function(mating_iteration, population, pf_data) {
network_scores <- getNetworkDensity(population, return_mean = FALSE) ** 3
if (length(network_scores[network_scores > 0]) <= 2) {
network_scores <- network_scores + 1
}
probs <- network_scores / sum(network_scores)
mates <- sample(population, 2, prob = probs, replace = T)
mates <- mutateNetworks(mates, pf_data)
gene_options <- lapply(mates, .get_gene_options)
offspring_genes <- apply(as.data.frame(gene_options), 1, .select_genes)
offspring <- new(
"PrixFixeNetwork",
"loci" = pf_data@loci_dataframe$locusID,
"genes" = offspring_genes)
return(calculateAdjacencyMatrix(offspring, pf_data))
}
# Mate population
population <- mateNetworks(population, pf_data, 20)
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
for (i in 1:3) {
# Mate population
population <- mateNetworks(population, pf_data, 20)
d <- getNetworkDensity(population)
print(paste0("Mean Density = ", d))
}
evolve <- function(population, pf_data, min_pct_change) {
early_stop = FALSE
while(!early_stop) {
previous_population_density <- getNetworkDensity(population)
next_population <- mateNetworks(population, pf_data, num_matings = length(population))
next_population_density <- getNetworkDensity(next_population)
pct_change <- (next_population_density / previous_population_density) - 1
if (pct_change < min_pct_change) {
early_stop = TRUE
cat("Stopping Optimization")
} else {
cat(paste0("Mean Density = ", next_population_density))
}
}
}
evolve <- function(population, pf_data, min_pct_change) {
early_stop = FALSE
while(!early_stop) {
previous_population_density <- getNetworkDensity(population)
population <- mateNetworks(population, pf_data, num_matings = length(population))
next_population_density <- getNetworkDensity(population)
pct_change <- (next_population_density / previous_population_density) - 1
if (pct_change < min_pct_change) {
early_stop = TRUE
cat("Stopping Optimization")
} else {
cat(paste0("Mean Density = ", next_population_density))
}
}
return(population)
}
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 100, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
d <- getNetworkDensity(population)
cat(paste0("Mean Density = ", d))
population <- evolve(population, pf_data, 0.05)
population
getNetworkDensity(population, F)
evolve <- function(population, pf_data, min_pct_change) {
early_stop = FALSE
while(!early_stop) {
previous_population_density <- getNetworkDensity(population)
population <- mateNetworks(population, pf_data, num_matings = length(population))
next_population_density <- getNetworkDensity(population)
pct_change <- (next_population_density / previous_population_density) - 1
if (pct_change < min_pct_change) {
early_stop = TRUE
cat("\nStopping Optimization")
} else {
cat(paste0("\nMean Density = ", next_population_density))
}
}
return(population)
}
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 1000, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
d <- getNetworkDensity(population)
cat(paste0("\nMean Density = ", d))
population <- evolve(population, pf_data, 0.05)
getNetworkDensity(population, F)
table(getNetworkDensity(population, F))
getTopNetwork(population)
library(doParallel)
registerDoParallel()
cat("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 5000, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
d <- getNetworkDensity(population)
cat(paste0("\nMean Density = ", d))
population <- evolve(population, pf_data, 0.05)
# Calculate the p-value of the population
cat("\nCalculating Significance of Population...")
t_s <- Sys.time()
p_value <- evaluatePopulationSignficance(pf_data, population, 10)
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
population <- initializePopulation(pf_data, population_size = 5000, "true_members")
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
d <- getNetworkDensity(population)
cat(paste0("\nMean Density = ", d))
population <- evolve(population, pf_data, 0.05)
# Calculate the p-value of the population
cat("\nCalculating Significance of Population...")
t_s <- Sys.time()
p_value <- evaluatePopulationSignficance(pf_data, population, 10)
cat(paste0("\n\tDone. Time Elapsed=", round(as.numeric((Sys.time()-t_s)), 2), " s"))
at("\nInitializing Population...")
t_s <- Sys.time()
population <- initializePopulation(pf_data, population_size = 500, "true_members")
