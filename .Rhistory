library(devtools)
load_all()
load_all()
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
load_all()
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
load_all()
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
load_all()
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
load_all()
PFDataLoader("../app/preloaded_data/FA_loci.txt", "../app/preloaded_data/Day3_STRING.txt")
load_all()
check()
load_all()
load_all()
options(devtools.desc.author="'Eric Prince <Eric.Prince@CUAnschutz.edu> [aut, cre]'")
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
check()
load_all()
check()
library(doParallel)
load_all()
check()
load_all()
load_all()
check()
load_all()
check()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
pf_data
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initialize_population(pf_data, population_size = 5)
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initializePopulation(pf_data, population_size = 5)
population <- initializePopulation(pf_data, population_size = 5, "true_members")
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initializePopulation(pf_data, population_size = 5, "true_members")
population
length(unlist(population))
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initializePopulation(pf_data, population_size = 5, "true_members")
load_all()
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
population <- initializePopulation(pf_data, population_size = 5, "true_members")
population
?utils::txtProgressBar
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
population <- initializePopulation(pf_data, population_size = 5, "true_members")
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
load_all()
evaluatePopulationSignficance(pf_data, population, 5)
evaluatePopulationSignficance(pf_data, population, 5)
population <- initializePopulation(
pf_data, population_size = 10, "true_members")
evaluatePopulationSignficance(pf_data, population, 50)
test <- function(x=1) {
while(TRUE) {
if (x > 5) {
return(x)
} else {
x <- x + 1
}
}
}
test()
load_all()
evaluatePopulationSignficance(pf_data, population, 50)
getTopNetwork <- function(population) {
densities <- getNetworkDensity(population, return_mean = FALSE)
top_network_index <- grep(max(densities), densities)
print(top_network_index)
}
getTopNetwork(population = )
getTopNetwork(population)
getTopNetwork <- function(population, multiple = FALSE) {
densities <- getNetworkDensity(population, return_mean = FALSE)
top_network_index <- grep(max(densities), densities)
# If only a single result requested and multiple top networks exist, select
# the first index in the list.
if (!multiple & length(top_network_index) > 1) {
top_network_index <- top_network_index[1]
}
return(population[[top_network_index]])
}
getTopNetwork(population)
pf_data
population[[1]]@s_i_star
population[[1]]@adjacency_matrix
length(network@loci)
lenth(population[[1]]@loci)
length(population[[1]]@loci)
population[[1]]@adjacency_matrix -> tmp
tmp
tmp[1,]
tmp[1,] <- 1
tmp
pf_data@loci_data
pf_data@loci_data[[1]]
population[[1]]@genes
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus <- A[i,] <- 0
empty_locus_density <- rowSums(empty_locus)
print(empty_locus_density)
# for (g_i in pf_data@loci_data[[i]]@true_members) {
#
#   }
}
}
calculateGeneScore(getTopNetwork(population))
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus <- A
empty_locus[i,] <- 0
empty_locus_density <- rowSums(empty_locus)
print(empty_locus_density)
# for (g_i in pf_data@loci_data[[i]]@true_members) {
#
#   }
}
}
calculateGeneScore(getTopNetwork(population))
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus <- A
empty_locus[i,] <- 0
empty_locus_density <- sum(rowSums(empty_locus))
print(empty_locus_density)
# for (g_i in pf_data@loci_data[[i]]@true_members) {
#
#   }
}
}
calculateGeneScore(getTopNetwork(population))
pf_data@loci_data[[1]]
pf_data@loci_data[[1]]@true_members
pf_data@loci_data[[1]]@true_members[1]
pf_data@loci_data[[1]]@true_members -> tmp
pf_data@cfn_data
pf_data@cfn_data %>% filter(X1 %in%  tmp)
pf_data@cfn_data %>% filter(X1 %in%  tmp | X2 %in% tmp)
library(reshape2)
pf_data@cfn_data %>% filter(X1 %in%  tmp | X2 %in% tmp) %>% dcast(X1 ~ X2)
tmp
tmp <- tmp[1]
tmp
pf_data@cfn_data %>% filter(X1 %in% tmp & X2 %in% population[[1]]@genes)
pf_data@cfn_data %>% filter(X1 == tmp & X2 %in% population[[1]]@genes)
pf_data@cfn_data %>% filter(X1 == tmp)
population[[1]]@genes
tmp
population[[1]]@genes -> other_loci
test_locus <- tmp
for (l in other_loci) { v <- pf_data@cfn_data %>% filter((X1 == test_locus & X2 == l) | (X2 == test_locus & X1 == l)); print(v) }
other_loci
other_loci <- c(other_loci, "MYOD1")
for (l in other_loci) { v <- pf_data@cfn_data %>% filter((X1 == test_locus & X2 == l) | (X2 == test_locus & X1 == l)); print(v) }
for (l in other_loci) { v <- pf_data@cfn_data %>% filter((X1 == test_locus & X2 == l)); ifelse(nrow(v) > 0, 1, 0) }
for (l in other_loci) { v <- pf_data@cfn_data %>% filter((X1 == test_locus & X2 == l)); res <- ifelse(nrow(v) > 0, 1, 0); print(res) }
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus_density <- .getEmptyLocusDensity(A, i)
for (g_i in pf_data@loci_data[[i]]@true_members) {
degrees <- c()
for (other_locus in network@genes) {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 = other_locus)
degrees <- c(degrees, ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees) - empty_locus_density
print(paste0(pf_data@loci_data[[i]]@locus_id, ": ", g_i, " = ", gene_score))
}
}
}
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus_density <- .getEmptyLocusDensity(A, i)
for (g_i in pf_data@loci_data[[i]]@true_members) {
degrees <- c()
for (other_locus in network@genes) {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 = other_locus)
degrees <- c(degrees, ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees) - empty_locus_density
print(paste0(pf_data@loci_data[[i]]@locus_id, ": ", g_i, " = ", gene_score))
}
}
}
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
for (i in 1:length(network@loci)) {
empty_locus_density <- .getEmptyLocusDensity(A, i)
for (g_i in pf_data@loci_data[[i]]@true_members) {
degrees <- c()
for (other_locus in network@genes) {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
degrees <- c(degrees, ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees) - empty_locus_density
print(paste0(pf_data@loci_data[[i]]@locus_id, ": ", g_i, " = ", gene_score))
}
}
}
calculateGeneScore(getTopNetwork(population))
.getEmptyLocusDensity <- function(A, i) {
# Helper function to create an empty locus in the adjacency matrix and
# returns the density of the subnetwork.
empty_locus <- A
empty_locus[i,] <- 0
empty_locus_density <- sum(rowSums(empty_locus))
return(empty_locus_density)
}
calculateGeneScore(getTopNetwork(population))
calculateGeneScore(getTopNetwork(population), pf_data)
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
foreach (i=1:length(network@loci)) %dopar% {
empty_locus_density <- .getEmptyLocusDensity(A, i)
foreach (g_i=pf_data@loci_data[[i]]@true_members) %dopar% {
degrees <- foreach(other_locus=network@genes,
.combine = "c") %dopar% {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
return(ifelse(nrow(matches) > 0, 1, 0)))
}
gene_score <- sum(degrees) - empty_locus_density
print(paste0(pf_data@loci_data[[i]]@locus_id, ": ", g_i, " = ", gene_score))
}
}
}
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
foreach (i=1:length(network@loci)) %dopar% {
empty_locus_density <- .getEmptyLocusDensity(A, i)
foreach (g_i=pf_data@loci_data[[i]]@true_members) %dopar% {
degrees <- foreach(other_locus=network@genes,
.combine = "c") %dopar% {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
return(ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees) - empty_locus_density
print(paste0(pf_data@loci_data[[i]]@locus_id, ": ", g_i, " = ", gene_score))
}
}
}
calculateGeneScore(getTopNetwork(population), pf_data)
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
loci <- foreach (i=1:length(network@loci),
.combine = "c") %dopar% {
empty_locus_density <- .getEmptyLocusDensity(A, i)
gene_scores <- foreach (g_i=pf_data@loci_data[[i]]@true_members,
.combine = "c") %dopar% {
degrees <- foreach(other_locus=network@genes,
.combine = "c") %dopar% {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
return(ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees) - empty_locus_density
return(gene_score)
}
return(gene_scores)
}
print(loci)
}
calculateGeneScore(getTopNetwork(population), pf_data)
load_all()
# Load required input data
pf_data <- PFDataLoader(
"../app/preloaded_data/FA_loci.txt",
"../app/preloaded_data/Day3_STRING.txt")
# Initialize the population of subnetworks
population <- initializePopulation(
pf_data, population_size = 100, "true_members")
# Initialize the population of subnetworks
population <- initializePopulation(
pf_data, population_size = 50, "true_members")
# Calculate the p-value of the population
p_value <- evaluatePopulationSignficance(pf_data, population, 10)
# Calculate the gene scores
calculateGeneScore(getTopNetwork(population), pf_data)
getTopNetwork(population)
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
loci <- foreach (i=1:length(network@loci),
.combine = "c") %dopar% {
empty_locus_density <- .getEmptyLocusDensity(A, i)
gene_scores <- foreach (g_i=pf_data@loci_data[[i]]@true_members,
.combine = "c") %dopar% {
degrees <- foreach(other_locus=network@genes,
.combine = "c") %dopar% {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
return(ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees)
return(gene_score)
}
return(gene_scores)
}
}
# Calculate the gene scores
calculateGeneScore(getTopNetwork(population), pf_data)
# for each gene in the locus
#   sub that gene with every other gene associated in that locus
#   calculate g_star density
#   remove that locus
#   calculate the empty locus density
#   return g_star density - empty locus density
calculateGeneScore <- function(network, pf_data) {
A <- network@adjacency_matrix
loci <- foreach (i=1:length(network@loci),
.combine = "c") %dopar% {
empty_locus_density <- .getEmptyLocusDensity(A, i)
gene_scores <- foreach (g_i=pf_data@loci_data[[i]]@true_members,
.combine = "c") %dopar% {
degrees <- foreach(other_locus=network@genes,
.combine = "c") %dopar% {
matches <- pf_data@cfn_data %>%
filter(X1 == g_i & X2 == other_locus)
return(ifelse(nrow(matches) > 0, 1, 0))
}
gene_score <- sum(degrees)
return(gene_score)
}
return(gene_scores)
}
return(loci)
}
# Calculate the gene scores
calculateGeneScore(getTopNetwork(population), pf_data)
